-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\hpa_module\hpa_module_src_hpa.vhd
-- Created: 2020-06-01 11:57:03
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.33333e-09
-- Target subsystem base rate: 3.33333e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.33333e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- time_s                        ce_out        3.33333e-09
-- time_f                        ce_out        3.33333e-09
-- nz_loc                        ce_out        3.33333e-09
-- nz_sum                        ce_out        3.33333e-09
-- s_img_axis_tready             ce_out        3.33333e-09
-- s_hps_axis_tready             ce_out        3.33333e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: hpa_module_src_hpa
-- Source Path: hpa_module/hpa
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY hpa_module_src_hpa IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        freq                              :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        rst                               :   IN    std_logic;
        s_img_axis_tvalid                 :   IN    std_logic;
        s_img_axis_tdata                  :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        s_img_axis_tlast                  :   IN    std_logic;
        s_hps_axis_tvalid                 :   IN    std_logic;
        s_hps_axis_tdata                  :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        s_hps_axis_tlast                  :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        time_s                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        time_f                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        nz_loc                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        nz_sum                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        s_img_axis_tready                 :   OUT   std_logic;
        s_hps_axis_tready                 :   OUT   std_logic
        );
END hpa_module_src_hpa;


ARCHITECTURE rtl OF hpa_module_src_hpa IS

  -- Component Declarations
  COMPONENT hpa_module_src_Rising_Edge_Detector_Valid
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Input                           :   IN    std_logic;
          Output                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT hpa_module_src_Rising_Edge_Detector_Last
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Input                           :   IN    std_logic;
          Output                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT hpa_module_src_Rising_Edge_Detector_Seconds
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Input                           :   IN    std_logic;
          Output                          :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : hpa_module_src_Rising_Edge_Detector_Valid
    USE ENTITY work.hpa_module_src_Rising_Edge_Detector_Valid(rtl);

  FOR ALL : hpa_module_src_Rising_Edge_Detector_Last
    USE ENTITY work.hpa_module_src_Rising_Edge_Detector_Last(rtl);

  FOR ALL : hpa_module_src_Rising_Edge_Detector_Seconds
    USE ENTITY work.hpa_module_src_Rising_Edge_Detector_Seconds(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL freq_unsigned                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Rising_Edge_Detector_Valid_out1  : std_logic;
  SIGNAL Rising_Edge_Detector_Last_out1   : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Multiport_Switch_out1            : std_logic;
  SIGNAL Unit_Delay_Resettable_Synchronous_out1 : std_logic;
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Rising_Edge_Detector_Seconds_out1 : std_logic;
  SIGNAL HDL_Counter1_out1                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL s_hps_axis_tdata_unsigned        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Add1_out1                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous1_out1 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Add1_add_cast                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Add_out1                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL Constant2_out1                   : std_logic;

BEGIN
  u_Rising_Edge_Detector_Valid : hpa_module_src_Rising_Edge_Detector_Valid
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Input => s_img_axis_tvalid,
              Output => Rising_Edge_Detector_Valid_out1
              );

  u_Rising_Edge_Detector_Last : hpa_module_src_Rising_Edge_Detector_Last
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Input => s_hps_axis_tlast,
              Output => Rising_Edge_Detector_Last_out1
              );

  u_Rising_Edge_Detector_Seconds : hpa_module_src_Rising_Edge_Detector_Seconds
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Input => Relational_Operator_relop1,
              Output => Rising_Edge_Detector_Seconds_out1
              );

  freq_unsigned <= unsigned(freq);

  enb <= clk_enable;

  Constant_out1 <= '1';

  Unit_Delay_Resettable_Synchronous_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Resettable_Synchronous_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Rising_Edge_Detector_Last_out1 = '1' THEN
          Unit_Delay_Resettable_Synchronous_out1 <= '0';
        ELSE 
          Unit_Delay_Resettable_Synchronous_out1 <= Multiport_Switch_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Resettable_Synchronous_process;


  
  Multiport_Switch_out1 <= Unit_Delay_Resettable_Synchronous_out1 WHEN Rising_Edge_Detector_Valid_out1 = '0' ELSE
      Constant_out1;

  OR_out1 <= rst OR Relational_Operator_relop1;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF OR_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(0, 32);
        ELSIF Multiport_Switch_out1 = '1' THEN 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Relational_Operator_relop1 <= '1' WHEN freq_unsigned = HDL_Counter_out1 ELSE
      '0';

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF rst = '1' THEN 
          HDL_Counter1_out1 <= to_unsigned(0, 32);
        ELSIF Rising_Edge_Detector_Seconds_out1 = '1' THEN 
          HDL_Counter1_out1 <= HDL_Counter1_out1 + to_unsigned(1, 32);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  time_s <= std_logic_vector(HDL_Counter1_out1);

  time_f <= std_logic_vector(HDL_Counter_out1);

  s_hps_axis_tdata_unsigned <= unsigned(s_hps_axis_tdata);

  
  Compare_To_Zero_out1 <= '1' WHEN s_hps_axis_tdata_unsigned /= to_unsigned(0, 32) ELSE
      '0';

  Unit_Delay_Enabled_Resettable_Synchronous1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF rst = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= to_unsigned(0, 32);
        ELSIF s_hps_axis_tvalid = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= Add1_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous1_process;


  Add1_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Compare_To_Zero_out1;
  Add1_out1 <= Add1_add_cast + Unit_Delay_Enabled_Resettable_Synchronous1_out1;

  nz_loc <= std_logic_vector(Add1_out1);

  Unit_Delay_Enabled_Resettable_Synchronous_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable_Synchronous_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF rst = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= to_unsigned(0, 32);
        ELSIF s_hps_axis_tvalid = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= Add_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous_process;


  Add_out1 <= s_hps_axis_tdata_unsigned + Unit_Delay_Enabled_Resettable_Synchronous_out1;

  nz_sum <= std_logic_vector(Add_out1);

  Constant1_out1 <= '1';

  Constant2_out1 <= '1';

  ce_out <= clk_enable;

  s_img_axis_tready <= Constant1_out1;

  s_hps_axis_tready <= Constant2_out1;

END rtl;

