-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\hpa_module\hpa_module_dut.vhd
-- Created: 2020-06-01 11:57:08
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: hpa_module_dut
-- Source Path: hpa_module/hpa_module_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY hpa_module_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        freq                              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        rst                               :   IN    std_logic;  -- ufix1
        s_img_axis_tvalid                 :   IN    std_logic;  -- ufix1
        s_img_axis_tdata                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        s_img_axis_tlast                  :   IN    std_logic;  -- ufix1
        s_hps_axis_tvalid                 :   IN    std_logic;  -- ufix1
        s_hps_axis_tdata                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        s_hps_axis_tlast                  :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        time_s                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        time_f                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        nz_loc                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        nz_sum                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        s_img_axis_tready                 :   OUT   std_logic;  -- ufix1
        s_hps_axis_tready                 :   OUT   std_logic  -- ufix1
        );
END hpa_module_dut;


ARCHITECTURE rtl OF hpa_module_dut IS

  -- Component Declarations
  COMPONENT hpa_module_src_hpa
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          freq                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          rst                             :   IN    std_logic;  -- ufix1
          s_img_axis_tvalid               :   IN    std_logic;  -- ufix1
          s_img_axis_tdata                :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          s_img_axis_tlast                :   IN    std_logic;  -- ufix1
          s_hps_axis_tvalid               :   IN    std_logic;  -- ufix1
          s_hps_axis_tdata                :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          s_hps_axis_tlast                :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          time_s                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          time_f                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          nz_loc                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          nz_sum                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          s_img_axis_tready               :   OUT   std_logic;  -- ufix1
          s_hps_axis_tready               :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : hpa_module_src_hpa
    USE ENTITY work.hpa_module_src_hpa(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL rst_sig                          : std_logic;  -- ufix1
  SIGNAL s_img_axis_tvalid_sig            : std_logic;  -- ufix1
  SIGNAL s_img_axis_tlast_sig             : std_logic;  -- ufix1
  SIGNAL s_hps_axis_tvalid_sig            : std_logic;  -- ufix1
  SIGNAL s_hps_axis_tlast_sig             : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL time_s_sig                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL time_f_sig                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nz_loc_sig                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nz_sum_sig                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL s_img_axis_tready_sig            : std_logic;  -- ufix1
  SIGNAL s_hps_axis_tready_sig            : std_logic;  -- ufix1

BEGIN
  u_hpa_module_src_hpa : hpa_module_src_hpa
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              freq => freq,  -- ufix32
              rst => rst_sig,  -- ufix1
              s_img_axis_tvalid => s_img_axis_tvalid_sig,  -- ufix1
              s_img_axis_tdata => s_img_axis_tdata,  -- ufix32
              s_img_axis_tlast => s_img_axis_tlast_sig,  -- ufix1
              s_hps_axis_tvalid => s_hps_axis_tvalid_sig,  -- ufix1
              s_hps_axis_tdata => s_hps_axis_tdata,  -- ufix32
              s_hps_axis_tlast => s_hps_axis_tlast_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              time_s => time_s_sig,  -- ufix32
              time_f => time_f_sig,  -- ufix32
              nz_loc => nz_loc_sig,  -- ufix32
              nz_sum => nz_sum_sig,  -- ufix32
              s_img_axis_tready => s_img_axis_tready_sig,  -- ufix1
              s_hps_axis_tready => s_hps_axis_tready_sig  -- ufix1
              );

  rst_sig <= rst;

  s_img_axis_tvalid_sig <= s_img_axis_tvalid;

  s_img_axis_tlast_sig <= s_img_axis_tlast;

  s_hps_axis_tvalid_sig <= s_hps_axis_tvalid;

  s_hps_axis_tlast_sig <= s_hps_axis_tlast;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  time_s <= time_s_sig;

  time_f <= time_f_sig;

  nz_loc <= nz_loc_sig;

  nz_sum <= nz_sum_sig;

  s_img_axis_tready <= s_img_axis_tready_sig;

  s_hps_axis_tready <= s_hps_axis_tready_sig;

END rtl;

