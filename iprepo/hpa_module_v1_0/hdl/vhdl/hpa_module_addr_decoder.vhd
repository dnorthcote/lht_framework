-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\hpa_module\hpa_module_addr_decoder.vhd
-- Created: 2020-06-01 11:57:08
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: hpa_module_addr_decoder
-- Source Path: hpa_module/hpa_module_axi_lite/hpa_module_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY hpa_module_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_time_s                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_time_f                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_nz_loc                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_nz_sum                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_freq                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_rst                         :   OUT   std_logic  -- ufix1
        );
END hpa_module_addr_decoder;


ARCHITECTURE rtl OF hpa_module_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_time_s                : std_logic;  -- ufix1
  SIGNAL decode_sel_rst                   : std_logic;  -- ufix1
  SIGNAL decode_sel_freq                  : std_logic;  -- ufix1
  SIGNAL decode_sel_ip_timestamp          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL reg_mux_dtc_axi_enable_0         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_switch_axi_enable_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_freq                     : std_logic;  -- ufix1
  SIGNAL write_reg_freq                   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_switch_freq_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_rst                      : std_logic;  -- ufix1
  SIGNAL data_in_rst                      : std_logic;  -- ufix1
  SIGNAL write_reg_rst                    : std_logic;  -- ufix1
  SIGNAL reg_mux_dtc_rst_0                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_time_s_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_time_f_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_nz_loc_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_nz_sum_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_nz_sum                : std_logic;  -- ufix1
  SIGNAL decode_sel_nz_loc                : std_logic;  -- ufix1
  SIGNAL decode_sel_time_f                : std_logic;  -- ufix1
  SIGNAL decode_switch_rst_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_time_s                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_time_s                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_time_f                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_time_f                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_nz_loc                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_nz_loc                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_nz_sum                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_nz_sum                 : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_time_s <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  
  decode_sel_rst <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  
  decode_sel_freq <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  
  decode_sel_ip_timestamp <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  const_1_1 <= '1';

  enb <= const_1_1;

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  reg_mux_dtc_axi_enable_0 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & write_reg_axi_enable;

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  
  decode_switch_axi_enable_1 <= const_0 WHEN decode_sel_axi_enable = '0' ELSE
      reg_mux_dtc_axi_enable_0;

  reg_ip_timestamp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_ip_timestamp <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp <= decode_switch_axi_enable_1 WHEN decode_sel_ip_timestamp = '0' ELSE
      read_reg_ip_timestamp;

  reg_enb_freq <= decode_sel_freq AND wr_enb;

  reg_freq_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_freq <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_freq = '1' THEN
        write_reg_freq <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_freq_process;


  
  decode_switch_freq_1 <= decode_rd_ip_timestamp WHEN decode_sel_freq = '0' ELSE
      write_reg_freq;

  reg_enb_rst <= decode_sel_rst AND wr_enb;

  data_in_rst <= data_write_unsigned(0);

  reg_rst_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_rst <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_rst = '1' THEN
        write_reg_rst <= data_in_rst;
      END IF;
    END IF;
  END PROCESS reg_rst_process;


  reg_mux_dtc_rst_0 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & write_reg_rst;

  read_time_s_unsigned <= unsigned(read_time_s);

  read_time_f_unsigned <= unsigned(read_time_f);

  read_nz_loc_unsigned <= unsigned(read_nz_loc);

  read_nz_sum_unsigned <= unsigned(read_nz_sum);

  
  decode_sel_nz_sum <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  
  decode_sel_nz_loc <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  
  decode_sel_time_f <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  
  decode_switch_rst_1 <= decode_switch_freq_1 WHEN decode_sel_rst = '0' ELSE
      reg_mux_dtc_rst_0;

  reg_time_s_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_time_s <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_time_s <= read_time_s_unsigned;
      END IF;
    END IF;
  END PROCESS reg_time_s_process;


  
  decode_rd_time_s <= decode_switch_rst_1 WHEN decode_sel_time_s = '0' ELSE
      read_reg_time_s;

  reg_time_f_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_time_f <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_time_f <= read_time_f_unsigned;
      END IF;
    END IF;
  END PROCESS reg_time_f_process;


  
  decode_rd_time_f <= decode_rd_time_s WHEN decode_sel_time_f = '0' ELSE
      read_reg_time_f;

  reg_nz_loc_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_nz_loc <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_nz_loc <= read_nz_loc_unsigned;
      END IF;
    END IF;
  END PROCESS reg_nz_loc_process;


  
  decode_rd_nz_loc <= decode_rd_time_f WHEN decode_sel_nz_loc = '0' ELSE
      read_reg_nz_loc;

  reg_nz_sum_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_nz_sum <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_nz_sum <= read_nz_sum_unsigned;
      END IF;
    END IF;
  END PROCESS reg_nz_sum_process;


  
  decode_rd_nz_sum <= decode_rd_nz_loc WHEN decode_sel_nz_sum = '0' ELSE
      read_reg_nz_sum;

  data_read <= std_logic_vector(decode_rd_nz_sum);

  write_axi_enable <= write_reg_axi_enable;

  write_freq <= std_logic_vector(write_reg_freq);

  write_rst <= write_reg_rst;

END rtl;

